import XNode from "@web-atoms/core/dist/core/xnode/XNode";

export interface IAbsoluteLayout {
    children: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const AbsoluteLayout = XNode.prepare<IAbsoluteLayout>("AbsoluteLayout");
export AbsoluteLayout;

export interface IActivityIndicator {
    color: any;
isRunning: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ActivityIndicator = XNode.prepare<IActivityIndicator>("ActivityIndicator");
export ActivityIndicator;

export interface IApplication {
    dispatcher: any;
appLinks: any;
mainPage: any;
properties: any;
navigationProxy: any;
panGestureId: any;
resources: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
bindingContext: any;
}
const Application = XNode.prepare<IApplication>("Application");
export Application;

export interface IAppLinkEntry {
    appLinkUri: any;
description: any;
isLinkActive: any;
keyValues: any;
thumbnail: any;
title: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const AppLinkEntry = XNode.prepare<IAppLinkEntry>("AppLinkEntry");
export AppLinkEntry;

export interface IBaseMenuItem {
    automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const BaseMenuItem = XNode.prepare<IBaseMenuItem>("BaseMenuItem");
export BaseMenuItem;

export interface IBoxView {
    color: any;
cornerRadius: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const BoxView = XNode.prepare<IBoxView>("BoxView");
export BoxView;

export interface IButton {
    padding: any;
borderColor: any;
borderRadius: any;
cornerRadius: any;
borderWidth: any;
contentLayout: any;
command: any;
commandParameter: any;
font: any;
imageSource: any;
image: any;
text: any;
textColor: any;
characterSpacing: any;
isPressed: any;
fontAttributes: any;
fontFamily: any;
fontSize: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Button = XNode.prepare<IButton>("Button");
export Button;

export interface ICarouselPage {
    itemsSource: any;
itemTemplate: any;
selectedItem: any;
currentPage: any;
children: any;
backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const CarouselPage = XNode.prepare<ICarouselPage>("CarouselPage");
export CarouselPage;

export interface ICell {
    contextActions: any;
hasContextActions: any;
isContextActionsLegacyModeEnabled: any;
height: any;
isEnabled: any;
renderHeight: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Cell = XNode.prepare<ICell>("Cell");
export Cell;

export interface IEntryCell {
    horizontalTextAlignment: any;
verticalTextAlignment: any;
keyboard: any;
label: any;
labelColor: any;
placeholder: any;
text: any;
xAlign: any;
contextActions: any;
hasContextActions: any;
isContextActionsLegacyModeEnabled: any;
height: any;
isEnabled: any;
renderHeight: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const EntryCell = XNode.prepare<IEntryCell>("EntryCell");
export EntryCell;

export interface IImageCell {
    imageSource: any;
command: any;
commandParameter: any;
detail: any;
detailColor: any;
text: any;
textColor: any;
contextActions: any;
hasContextActions: any;
isContextActionsLegacyModeEnabled: any;
height: any;
isEnabled: any;
renderHeight: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ImageCell = XNode.prepare<IImageCell>("ImageCell");
export ImageCell;

export interface ISwitchCell {
    onColor: any;
on: any;
text: any;
contextActions: any;
hasContextActions: any;
isContextActionsLegacyModeEnabled: any;
height: any;
isEnabled: any;
renderHeight: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SwitchCell = XNode.prepare<ISwitchCell>("SwitchCell");
export SwitchCell;

export interface ITextCell {
    command: any;
commandParameter: any;
detail: any;
detailColor: any;
text: any;
textColor: any;
contextActions: any;
hasContextActions: any;
isContextActionsLegacyModeEnabled: any;
height: any;
isEnabled: any;
renderHeight: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TextCell = XNode.prepare<ITextCell>("TextCell");
export TextCell;

export interface IViewCell {
    view: any;
contextActions: any;
hasContextActions: any;
isContextActionsLegacyModeEnabled: any;
height: any;
isEnabled: any;
renderHeight: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ViewCell = XNode.prepare<IViewCell>("ViewCell");
export ViewCell;

export interface ICheckBox {
    color: any;
isChecked: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const CheckBox = XNode.prepare<ICheckBox>("CheckBox");
export CheckBox;

export interface IClickGestureRecognizer {
    command: any;
commandParameter: any;
numberOfClicksRequired: any;
buttons: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ClickGestureRecognizer = XNode.prepare<IClickGestureRecognizer>("ClickGestureRecognizer");
export ClickGestureRecognizer;

export interface IContentPage {
    content: any;
controlTemplate: any;
backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ContentPage = XNode.prepare<IContentPage>("ContentPage");
export ContentPage;

export interface IContentPresenter {
    content: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ContentPresenter = XNode.prepare<IContentPresenter>("ContentPresenter");
export ContentPresenter;

export interface IContentView {
    content: any;
controlTemplate: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ContentView = XNode.prepare<IContentView>("ContentView");
export ContentView;

export interface IDatePicker {
    date: any;
format: any;
maximumDate: any;
minimumDate: any;
textColor: any;
characterSpacing: any;
fontAttributes: any;
fontFamily: any;
fontSize: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const DatePicker = XNode.prepare<IDatePicker>("DatePicker");
export DatePicker;

export interface IEditor {
    autoSize: any;
fontAttributes: any;
isTextPredictionEnabled: any;
fontFamily: any;
fontSize: any;
maxLength: any;
text: any;
keyboard: any;
isSpellCheckEnabled: any;
isReadOnly: any;
placeholder: any;
placeholderColor: any;
textColor: any;
characterSpacing: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Editor = XNode.prepare<IEditor>("Editor");
export Editor;

export interface IEntry {
    horizontalTextAlignment: any;
verticalTextAlignment: any;
isPassword: any;
fontAttributes: any;
fontFamily: any;
fontSize: any;
isTextPredictionEnabled: any;
returnType: any;
cursorPosition: any;
selectionLength: any;
returnCommand: any;
returnCommandParameter: any;
clearButtonVisibility: any;
maxLength: any;
text: any;
keyboard: any;
isSpellCheckEnabled: any;
isReadOnly: any;
placeholder: any;
placeholderColor: any;
textColor: any;
characterSpacing: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Entry = XNode.prepare<IEntry>("Entry");
export Entry;

export interface IFileImageSource {
    isEmpty: any;
file: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const FileImageSource = XNode.prepare<IFileImageSource>("FileImageSource");
export FileImageSource;

export interface IFlexLayout {
    direction: any;
justifyContent: any;
alignContent: any;
alignItems: any;
position: any;
wrap: any;
children: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const FlexLayout = XNode.prepare<IFlexLayout>("FlexLayout");
export FlexLayout;

export interface IFontImageSource {
    isEmpty: any;
size: any;
glyph: any;
color: any;
fontFamily: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const FontImageSource = XNode.prepare<IFontImageSource>("FontImageSource");
export FontImageSource;

export interface IFormattedString {
    spans: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const FormattedString = XNode.prepare<IFormattedString>("FormattedString");
export FormattedString;

export interface IFrame {
    hasShadow: any;
outlineColor: any;
borderColor: any;
cornerRadius: any;
content: any;
controlTemplate: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Frame = XNode.prepare<IFrame>("Frame");
export Frame;

export interface IGestureElement {
    gestureRecognizers: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const GestureElement = XNode.prepare<IGestureElement>("GestureElement");
export GestureElement;

export interface IGestureRecognizer {
    automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const GestureRecognizer = XNode.prepare<IGestureRecognizer>("GestureRecognizer");
export GestureRecognizer;

export interface IGrid {
    children: any;
columnDefinitions: any;
columnSpacing: any;
rowDefinitions: any;
rowSpacing: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Grid = XNode.prepare<IGrid>("Grid");
export Grid;

export interface IImage {
    aspect: any;
isLoading: any;
isOpaque: any;
isAnimationPlaying: any;
source: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Image = XNode.prepare<IImage>("Image");
export Image;

export interface IImageButton {
    borderColor: any;
cornerRadius: any;
borderWidth: any;
aspect: any;
isLoading: any;
isPressed: any;
isOpaque: any;
command: any;
commandParameter: any;
source: any;
padding: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ImageButton = XNode.prepare<IImageButton>("ImageButton");
export ImageButton;

export interface IImageSource {
    isEmpty: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ImageSource = XNode.prepare<IImageSource>("ImageSource");
export ImageSource;

export interface IIndicatorView {
    indicatorsShape: any;
indicatorLayout: any;
position: any;
count: any;
maximumVisible: any;
indicatorTemplate: any;
hideSingle: any;
indicatorColor: any;
selectedIndicatorColor: any;
indicatorSize: any;
itemsSource: any;
controlTemplate: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const IndicatorView = XNode.prepare<IIndicatorView>("IndicatorView");
export IndicatorView;

export interface IInputView {
    maxLength: any;
text: any;
keyboard: any;
isSpellCheckEnabled: any;
isReadOnly: any;
placeholder: any;
placeholderColor: any;
textColor: any;
characterSpacing: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const InputView = XNode.prepare<IInputView>("InputView");
export InputView;

export interface ICarouselView {
    peekAreaInsets: any;
visibleViews: any;
isDragging: any;
isBounceEnabled: any;
isSwipeEnabled: any;
isScrollAnimated: any;
currentItem: any;
currentItemChangedCommand: any;
currentItemChangedCommandParameter: any;
position: any;
positionChangedCommand: any;
positionChangedCommandParameter: any;
itemsLayout: any;
isScrolling: any;
emptyView: any;
emptyViewTemplate: any;
itemsSource: any;
remainingItemsThresholdReachedCommand: any;
remainingItemsThresholdReachedCommandParameter: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
remainingItemsThreshold: any;
itemTemplate: any;
itemsUpdatingScrollMode: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const CarouselView = XNode.prepare<ICarouselView>("CarouselView");
export CarouselView;

export interface ICollectionView {
    isGrouped: any;
groupHeaderTemplate: any;
groupFooterTemplate: any;
selectedItem: any;
selectedItems: any;
selectionChangedCommand: any;
selectionChangedCommandParameter: any;
selectionMode: any;
header: any;
headerTemplate: any;
footer: any;
footerTemplate: any;
itemsLayout: any;
itemSizingStrategy: any;
emptyView: any;
emptyViewTemplate: any;
itemsSource: any;
remainingItemsThresholdReachedCommand: any;
remainingItemsThresholdReachedCommandParameter: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
remainingItemsThreshold: any;
itemTemplate: any;
itemsUpdatingScrollMode: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const CollectionView = XNode.prepare<ICollectionView>("CollectionView");
export CollectionView;

export interface IGroupableItemsView {
    isGrouped: any;
groupHeaderTemplate: any;
groupFooterTemplate: any;
selectedItem: any;
selectedItems: any;
selectionChangedCommand: any;
selectionChangedCommandParameter: any;
selectionMode: any;
header: any;
headerTemplate: any;
footer: any;
footerTemplate: any;
itemsLayout: any;
itemSizingStrategy: any;
emptyView: any;
emptyViewTemplate: any;
itemsSource: any;
remainingItemsThresholdReachedCommand: any;
remainingItemsThresholdReachedCommandParameter: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
remainingItemsThreshold: any;
itemTemplate: any;
itemsUpdatingScrollMode: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const GroupableItemsView = XNode.prepare<IGroupableItemsView>("GroupableItemsView");
export GroupableItemsView;

export interface IItemsView {
    emptyView: any;
emptyViewTemplate: any;
itemsSource: any;
remainingItemsThresholdReachedCommand: any;
remainingItemsThresholdReachedCommandParameter: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
remainingItemsThreshold: any;
itemTemplate: any;
itemsUpdatingScrollMode: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ItemsView = XNode.prepare<IItemsView>("ItemsView");
export ItemsView;

export interface ISelectableItemsView {
    selectedItem: any;
selectedItems: any;
selectionChangedCommand: any;
selectionChangedCommandParameter: any;
selectionMode: any;
header: any;
headerTemplate: any;
footer: any;
footerTemplate: any;
itemsLayout: any;
itemSizingStrategy: any;
emptyView: any;
emptyViewTemplate: any;
itemsSource: any;
remainingItemsThresholdReachedCommand: any;
remainingItemsThresholdReachedCommandParameter: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
remainingItemsThreshold: any;
itemTemplate: any;
itemsUpdatingScrollMode: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SelectableItemsView = XNode.prepare<ISelectableItemsView>("SelectableItemsView");
export SelectableItemsView;

export interface IStructuredItemsView {
    header: any;
headerTemplate: any;
footer: any;
footerTemplate: any;
itemsLayout: any;
itemSizingStrategy: any;
emptyView: any;
emptyViewTemplate: any;
itemsSource: any;
remainingItemsThresholdReachedCommand: any;
remainingItemsThresholdReachedCommandParameter: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
remainingItemsThreshold: any;
itemTemplate: any;
itemsUpdatingScrollMode: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const StructuredItemsView = XNode.prepare<IStructuredItemsView>("StructuredItemsView");
export StructuredItemsView;

export interface ILabel {
    font: any;
formattedText: any;
horizontalTextAlignment: any;
lineBreakMode: any;
text: any;
textColor: any;
characterSpacing: any;
verticalTextAlignment: any;
xAlign: any;
yAlign: any;
fontAttributes: any;
textDecorations: any;
fontFamily: any;
fontSize: any;
lineHeight: any;
maxLines: any;
padding: any;
textType: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Label = XNode.prepare<ILabel>("Label");
export Label;

export interface ILayout {
    isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Layout = XNode.prepare<ILayout>("Layout");
export Layout;

export interface IListView {
    footer: any;
footerTemplate: any;
groupDisplayBinding: any;
groupHeaderTemplate: any;
groupShortNameBinding: any;
hasUnevenRows: any;
header: any;
headerTemplate: any;
isGroupingEnabled: any;
isPullToRefreshEnabled: any;
isRefreshing: any;
refreshCommand: any;
rowHeight: any;
selectedItem: any;
selectionMode: any;
separatorColor: any;
refreshControlColor: any;
separatorVisibility: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
cachingStrategy: any;
refreshAllowed: any;
footerElement: any;
headerElement: any;
itemsSource: any;
itemTemplate: any;
templatedItems: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ListView = XNode.prepare<IListView>("ListView");
export ListView;

export interface IMasterDetailPage {
    detail: any;
isGestureEnabled: any;
isPresented: any;
master: any;
masterBehavior: any;
canChangeIsPresented: any;
detailBounds: any;
masterBounds: any;
shouldShowSplitMode: any;
backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const MasterDetailPage = XNode.prepare<IMasterDetailPage>("MasterDetailPage");
export MasterDetailPage;

export interface IMenu {
    item: any;
text: any;
items: any;
count: any;
isReadOnly: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Menu = XNode.prepare<IMenu>("Menu");
export Menu;

export interface IMenuItem {
    command: any;
commandParameter: any;
icon: any;
iconImageSource: any;
isDestructive: any;
text: any;
isEnabled: any;
isEnabledPropertyName: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const MenuItem = XNode.prepare<IMenuItem>("MenuItem");
export MenuItem;

export interface INavigationPage {
    barBackgroundColor: any;
barTextColor: any;
tint: any;
pages: any;
stackDepth: any;
currentPage: any;
rootPage: any;
backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const NavigationPage = XNode.prepare<INavigationPage>("NavigationPage");
export NavigationPage;

export interface IOpenGLView {
    hasRenderLoop: any;
onDisplay: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const OpenGLView = XNode.prepare<IOpenGLView>("OpenGLView");
export OpenGLView;

export interface IPage {
    backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Page = XNode.prepare<IPage>("Page");
export Page;

export interface IPanGestureRecognizer {
    touchPoints: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const PanGestureRecognizer = XNode.prepare<IPanGestureRecognizer>("PanGestureRecognizer");
export PanGestureRecognizer;

export interface IPicker {
    fontAttributes: any;
fontFamily: any;
fontSize: any;
items: any;
itemsSource: any;
selectedIndex: any;
selectedItem: any;
textColor: any;
characterSpacing: any;
title: any;
titleColor: any;
itemDisplayBinding: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Picker = XNode.prepare<IPicker>("Picker");
export Picker;

export interface IPinchGestureRecognizer {
    isPinching: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const PinchGestureRecognizer = XNode.prepare<IPinchGestureRecognizer>("PinchGestureRecognizer");
export PinchGestureRecognizer;

export interface IProgressBar {
    progressColor: any;
progress: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ProgressBar = XNode.prepare<IProgressBar>("ProgressBar");
export ProgressBar;

export interface IRefreshView {
    isRefreshing: any;
command: any;
commandParameter: any;
refreshColor: any;
content: any;
controlTemplate: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const RefreshView = XNode.prepare<IRefreshView>("RefreshView");
export RefreshView;

export interface IRelativeLayout {
    children: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const RelativeLayout = XNode.prepare<IRelativeLayout>("RelativeLayout");
export RelativeLayout;

export interface IScrollView {
    layoutAreaOverride: any;
content: any;
contentSize: any;
orientation: any;
scrollX: any;
scrollY: any;
horizontalScrollBarVisibility: any;
verticalScrollBarVisibility: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ScrollView = XNode.prepare<IScrollView>("ScrollView");
export ScrollView;

export interface ISearchBar {
    cancelButtonColor: any;
horizontalTextAlignment: any;
verticalTextAlignment: any;
searchCommand: any;
searchCommandParameter: any;
fontAttributes: any;
fontFamily: any;
fontSize: any;
maxLength: any;
text: any;
keyboard: any;
isSpellCheckEnabled: any;
isReadOnly: any;
placeholder: any;
placeholderColor: any;
textColor: any;
characterSpacing: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SearchBar = XNode.prepare<ISearchBar>("SearchBar");
export SearchBar;

export interface IBaseShellItem {
    flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const BaseShellItem = XNode.prepare<IBaseShellItem>("BaseShellItem");
export BaseShellItem;

export interface INavigableElement {
    navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const NavigableElement = XNode.prepare<INavigableElement>("NavigableElement");
export NavigableElement;

export interface IShell {
    flyoutVerticalScrollMode: any;
flyoutIcon: any;
currentItem: any;
currentState: any;
flyoutBackgroundImage: any;
flyoutBackgroundImageAspect: any;
flyoutBackgroundColor: any;
flyoutBehavior: any;
flyoutHeader: any;
flyoutHeaderBehavior: any;
flyoutHeaderTemplate: any;
flyoutIsPresented: any;
items: any;
itemTemplate: any;
menuItemTemplate: any;
backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Shell = XNode.prepare<IShell>("Shell");
export Shell;

export interface IShellContent {
    menuItems: any;
content: any;
contentTemplate: any;
flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ShellContent = XNode.prepare<IShellContent>("ShellContent");
export ShellContent;

export interface IShellGroupItem {
    flyoutDisplayOptions: any;
flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ShellGroupItem = XNode.prepare<IShellGroupItem>("ShellGroupItem");
export ShellGroupItem;

export interface IFlyoutItem {
    currentItem: any;
items: any;
flyoutDisplayOptions: any;
flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const FlyoutItem = XNode.prepare<IFlyoutItem>("FlyoutItem");
export FlyoutItem;

export interface ITabBar {
    currentItem: any;
items: any;
flyoutDisplayOptions: any;
flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TabBar = XNode.prepare<ITabBar>("TabBar");
export TabBar;

export interface IShellItem {
    currentItem: any;
items: any;
flyoutDisplayOptions: any;
flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ShellItem = XNode.prepare<IShellItem>("ShellItem");
export ShellItem;

export interface ITab {
    currentItem: any;
items: any;
stack: any;
flyoutDisplayOptions: any;
flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Tab = XNode.prepare<ITab>("Tab");
export Tab;

export interface IShellSection {
    currentItem: any;
items: any;
stack: any;
flyoutDisplayOptions: any;
flyoutIcon: any;
icon: any;
isChecked: any;
isEnabled: any;
route: any;
title: any;
tabIndex: any;
isTabStop: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ShellSection = XNode.prepare<IShellSection>("ShellSection");
export ShellSection;

export interface ISlider {
    minimumTrackColor: any;
maximumTrackColor: any;
thumbColor: any;
thumbImageSource: any;
thumbImage: any;
dragStartedCommand: any;
dragCompletedCommand: any;
maximum: any;
minimum: any;
value: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Slider = XNode.prepare<ISlider>("Slider");
export Slider;

export interface ISpan {
    style: any;
backgroundColor: any;
textColor: any;
characterSpacing: any;
foregroundColor: any;
text: any;
font: any;
fontAttributes: any;
fontFamily: any;
fontSize: any;
textDecorations: any;
lineHeight: any;
gestureRecognizers: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Span = XNode.prepare<ISpan>("Span");
export Span;

export interface IStackLayout {
    orientation: any;
spacing: any;
children: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const StackLayout = XNode.prepare<IStackLayout>("StackLayout");
export StackLayout;

export interface IStepper {
    increment: any;
maximum: any;
minimum: any;
value: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Stepper = XNode.prepare<IStepper>("Stepper");
export Stepper;

export interface IStreamImageSource {
    isEmpty: any;
stream: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const StreamImageSource = XNode.prepare<IStreamImageSource>("StreamImageSource");
export StreamImageSource;

export interface ISwipeGestureRecognizer {
    command: any;
commandParameter: any;
direction: any;
threshold: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SwipeGestureRecognizer = XNode.prepare<ISwipeGestureRecognizer>("SwipeGestureRecognizer");
export SwipeGestureRecognizer;

export interface ISwipeItem {
    backgroundColor: any;
command: any;
commandParameter: any;
icon: any;
iconImageSource: any;
isDestructive: any;
text: any;
isEnabled: any;
isEnabledPropertyName: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SwipeItem = XNode.prepare<ISwipeItem>("SwipeItem");
export SwipeItem;

export interface ISwipeItems {
    mode: any;
swipeBehaviorOnInvoked: any;
item: any;
count: any;
isReadOnly: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SwipeItems = XNode.prepare<ISwipeItems>("SwipeItems");
export SwipeItems;

export interface ISwipeItemView {
    command: any;
commandParameter: any;
content: any;
controlTemplate: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SwipeItemView = XNode.prepare<ISwipeItemView>("SwipeItemView");
export SwipeItemView;

export interface ISwipeView {
    leftItems: any;
rightItems: any;
topItems: any;
bottomItems: any;
content: any;
controlTemplate: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const SwipeView = XNode.prepare<ISwipeView>("SwipeView");
export SwipeView;

export interface ISwitch {
    onColor: any;
thumbColor: any;
isToggled: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const Switch = XNode.prepare<ISwitch>("Switch");
export Switch;

export interface ITabbedPage {
    barBackgroundColor: any;
barTextColor: any;
unselectedTabColor: any;
selectedTabColor: any;
itemsSource: any;
itemTemplate: any;
selectedItem: any;
currentPage: any;
children: any;
backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TabbedPage = XNode.prepare<ITabbedPage>("TabbedPage");
export TabbedPage;

export interface ITableView {
    hasUnevenRows: any;
intent: any;
root: any;
rowHeight: any;
model: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TableView = XNode.prepare<ITableView>("TableView");
export TableView;

export interface ITapGestureRecognizer {
    command: any;
commandParameter: any;
numberOfTapsRequired: any;
tappedCallback: any;
tappedCallbackParameter: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TapGestureRecognizer = XNode.prepare<ITapGestureRecognizer>("TapGestureRecognizer");
export TapGestureRecognizer;

export interface ITemplatedPage {
    controlTemplate: any;
backgroundImage: any;
backgroundImageSource: any;
icon: any;
iconImageSource: any;
isBusy: any;
padding: any;
title: any;
toolbarItems: any;
containerArea: any;
ignoresContainerArea: any;
internalChildren: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TemplatedPage = XNode.prepare<ITemplatedPage>("TemplatedPage");
export TemplatedPage;

export interface ITemplatedView {
    controlTemplate: any;
isClippedToBounds: any;
padding: any;
cascadeInputTransparent: any;
children: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TemplatedView = XNode.prepare<ITemplatedView>("TemplatedView");
export TemplatedView;

export interface ITimePicker {
    format: any;
textColor: any;
characterSpacing: any;
time: any;
fontAttributes: any;
fontFamily: any;
fontSize: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const TimePicker = XNode.prepare<ITimePicker>("TimePicker");
export TimePicker;

export interface IToolbarItem {
    name: any;
order: any;
priority: any;
command: any;
commandParameter: any;
icon: any;
iconImageSource: any;
isDestructive: any;
text: any;
isEnabled: any;
isEnabledPropertyName: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const ToolbarItem = XNode.prepare<IToolbarItem>("ToolbarItem");
export ToolbarItem;

export interface IUriImageSource {
    isEmpty: any;
cacheValidity: any;
cachingEnabled: any;
uri: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const UriImageSource = XNode.prepare<IUriImageSource>("UriImageSource");
export UriImageSource;

export interface IView {
    gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const View = XNode.prepare<IView>("View");
export View;

export interface IVisualElement {
    visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const VisualElement = XNode.prepare<IVisualElement>("VisualElement");
export VisualElement;

export interface IWebView {
    canGoBack: any;
canGoForward: any;
source: any;
gestureRecognizers: any;
horizontalOptions: any;
margin: any;
verticalOptions: any;
visual: any;
flowDirection: any;
anchorX: any;
anchorY: any;
backgroundColor: any;
behaviors: any;
bounds: any;
height: any;
heightRequest: any;
inputTransparent: any;
isEnabled: any;
isFocused: any;
isVisible: any;
minimumHeightRequest: any;
minimumWidthRequest: any;
opacity: any;
rotation: any;
rotationX: any;
rotationY: any;
scale: any;
scaleX: any;
scaleY: any;
tabIndex: any;
isTabStop: any;
translationX: any;
translationY: any;
triggers: any;
width: any;
widthRequest: any;
x: any;
y: any;
batched: any;
disableLayout: any;
isInNativeLayout: any;
isNativeStateConsistent: any;
isPlatformEnabled: any;
resources: any;
navigation: any;
style: any;
styleClass: any;
class: any;
navigationProxy: any;
automationId: any;
classId: any;
effects: any;
id: any;
parentView: any;
styleId: any;
logicalChildren: any;
realParent: any;
parent: any;
effectControlProvider: any;
platform: any;
dispatcher: any;
bindingContext: any;
}
const WebView = XNode.prepare<IWebView>("WebView");
export WebView;

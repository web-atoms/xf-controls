//tslint:disable
import XNode from "@web-atoms/core/dist/core/xnode/XNode";

export interface IAbsoluteLayout {
    children?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const AbsoluteLayout = XNode.prepare<IAbsoluteLayout>("AbsoluteLayout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IActivityIndicator {
    color?: any;
isRunning?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ActivityIndicator = XNode.prepare<IActivityIndicator>("ActivityIndicator|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IApplication {
    dispatcher?: any;
appLinks?: any;
mainPage?: any;
properties?: any;
navigationProxy?: any;
panGestureId?: any;
resources?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Application = XNode.prepare<IApplication>("Application|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IAppLinkEntry {
    appLinkUri?: any;
description?: any;
isLinkActive?: any;
keyValues?: any;
thumbnail?: any;
title?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const AppLinkEntry = XNode.prepare<IAppLinkEntry>("AppLinkEntry|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IBaseMenuItem {
    automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const BaseMenuItem = XNode.prepare<IBaseMenuItem>("BaseMenuItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IBoxView {
    color?: any;
cornerRadius?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const BoxView = XNode.prepare<IBoxView>("BoxView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IButton {
    padding?: any;
borderColor?: any;
borderRadius?: any;
cornerRadius?: any;
borderWidth?: any;
contentLayout?: any;
command?: any;
commandParameter?: any;
font?: any;
imageSource?: any;
image?: any;
text?: any;
textColor?: any;
characterSpacing?: any;
isPressed?: any;
fontAttributes?: any;
fontFamily?: any;
fontSize?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Button = XNode.prepare<IButton>("Button|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ICarouselPage {
    itemsSource?: any;
itemTemplate?: any;
selectedItem?: any;
currentPage?: any;
children?: any;
backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const CarouselPage = XNode.prepare<ICarouselPage>("CarouselPage|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ICell {
    contextActions?: any;
hasContextActions?: any;
isContextActionsLegacyModeEnabled?: any;
height?: any;
isEnabled?: any;
renderHeight?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Cell = XNode.prepare<ICell>("Cell|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IEntryCell {
    horizontalTextAlignment?: any;
verticalTextAlignment?: any;
keyboard?: any;
label?: any;
labelColor?: any;
placeholder?: any;
text?: any;
xAlign?: any;
contextActions?: any;
hasContextActions?: any;
isContextActionsLegacyModeEnabled?: any;
height?: any;
isEnabled?: any;
renderHeight?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const EntryCell = XNode.prepare<IEntryCell>("EntryCell|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IImageCell {
    imageSource?: any;
command?: any;
commandParameter?: any;
detail?: any;
detailColor?: any;
text?: any;
textColor?: any;
contextActions?: any;
hasContextActions?: any;
isContextActionsLegacyModeEnabled?: any;
height?: any;
isEnabled?: any;
renderHeight?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ImageCell = XNode.prepare<IImageCell>("ImageCell|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISwitchCell {
    onColor?: any;
on?: any;
text?: any;
contextActions?: any;
hasContextActions?: any;
isContextActionsLegacyModeEnabled?: any;
height?: any;
isEnabled?: any;
renderHeight?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SwitchCell = XNode.prepare<ISwitchCell>("SwitchCell|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITextCell {
    command?: any;
commandParameter?: any;
detail?: any;
detailColor?: any;
text?: any;
textColor?: any;
contextActions?: any;
hasContextActions?: any;
isContextActionsLegacyModeEnabled?: any;
height?: any;
isEnabled?: any;
renderHeight?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TextCell = XNode.prepare<ITextCell>("TextCell|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IViewCell {
    view?: any;
contextActions?: any;
hasContextActions?: any;
isContextActionsLegacyModeEnabled?: any;
height?: any;
isEnabled?: any;
renderHeight?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ViewCell = XNode.prepare<IViewCell>("ViewCell|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ICheckBox {
    color?: any;
isChecked?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const CheckBox = XNode.prepare<ICheckBox>("CheckBox|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IClickGestureRecognizer {
    command?: any;
commandParameter?: any;
numberOfClicksRequired?: any;
buttons?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ClickGestureRecognizer = XNode.prepare<IClickGestureRecognizer>("ClickGestureRecognizer|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IColumnDefinition {
    width?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ColumnDefinition = XNode.prepare<IColumnDefinition>("ColumnDefinition|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IContentPage {
    content?: any;
controlTemplate?: any;
backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ContentPage = XNode.prepare<IContentPage>("ContentPage|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IContentPresenter {
    content?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ContentPresenter = XNode.prepare<IContentPresenter>("ContentPresenter|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IContentView {
    content?: any;
controlTemplate?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ContentView = XNode.prepare<IContentView>("ContentView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IDatePicker {
    date?: any;
format?: any;
maximumDate?: any;
minimumDate?: any;
textColor?: any;
characterSpacing?: any;
fontAttributes?: any;
fontFamily?: any;
fontSize?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const DatePicker = XNode.prepare<IDatePicker>("DatePicker|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IEditor {
    autoSize?: any;
fontAttributes?: any;
isTextPredictionEnabled?: any;
fontFamily?: any;
fontSize?: any;
maxLength?: any;
text?: any;
keyboard?: any;
isSpellCheckEnabled?: any;
isReadOnly?: any;
placeholder?: any;
placeholderColor?: any;
textColor?: any;
characterSpacing?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Editor = XNode.prepare<IEditor>("Editor|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IElement {
    automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Element = XNode.prepare<IElement>("Element|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IEntry {
    horizontalTextAlignment?: any;
verticalTextAlignment?: any;
isPassword?: any;
fontAttributes?: any;
fontFamily?: any;
fontSize?: any;
isTextPredictionEnabled?: any;
returnType?: any;
cursorPosition?: any;
selectionLength?: any;
returnCommand?: any;
returnCommandParameter?: any;
clearButtonVisibility?: any;
maxLength?: any;
text?: any;
keyboard?: any;
isSpellCheckEnabled?: any;
isReadOnly?: any;
placeholder?: any;
placeholderColor?: any;
textColor?: any;
characterSpacing?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Entry = XNode.prepare<IEntry>("Entry|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IFileImageSource {
    isEmpty?: any;
file?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const FileImageSource = XNode.prepare<IFileImageSource>("FileImageSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IFlexLayout {
    direction?: any;
justifyContent?: any;
alignContent?: any;
alignItems?: any;
position?: any;
wrap?: any;
children?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const FlexLayout = XNode.prepare<IFlexLayout>("FlexLayout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IFontImageSource {
    isEmpty?: any;
size?: any;
glyph?: any;
color?: any;
fontFamily?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const FontImageSource = XNode.prepare<IFontImageSource>("FontImageSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IFormattedString {
    spans?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const FormattedString = XNode.prepare<IFormattedString>("FormattedString|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IFrame {
    hasShadow?: any;
outlineColor?: any;
borderColor?: any;
cornerRadius?: any;
content?: any;
controlTemplate?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Frame = XNode.prepare<IFrame>("Frame|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IGestureElement {
    gestureRecognizers?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const GestureElement = XNode.prepare<IGestureElement>("GestureElement|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IGestureRecognizer {
    automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const GestureRecognizer = XNode.prepare<IGestureRecognizer>("GestureRecognizer|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IGrid {
    children?: any;
columnDefinitions?: any;
columnSpacing?: any;
rowDefinitions?: any;
rowSpacing?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Grid = XNode.prepare<IGrid>("Grid|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IHtmlWebViewSource {
    baseUrl?: any;
html?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const HtmlWebViewSource = XNode.prepare<IHtmlWebViewSource>("HtmlWebViewSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IImage {
    aspect?: any;
isLoading?: any;
isOpaque?: any;
isAnimationPlaying?: any;
source?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Image = XNode.prepare<IImage>("Image|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IImageButton {
    borderColor?: any;
cornerRadius?: any;
borderWidth?: any;
aspect?: any;
isLoading?: any;
isPressed?: any;
isOpaque?: any;
command?: any;
commandParameter?: any;
source?: any;
padding?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ImageButton = XNode.prepare<IImageButton>("ImageButton|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IImageSource {
    isEmpty?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ImageSource = XNode.prepare<IImageSource>("ImageSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IIndicatorView {
    indicatorsShape?: any;
indicatorLayout?: any;
position?: any;
count?: any;
maximumVisible?: any;
indicatorTemplate?: any;
hideSingle?: any;
indicatorColor?: any;
selectedIndicatorColor?: any;
indicatorSize?: any;
itemsSource?: any;
controlTemplate?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const IndicatorView = XNode.prepare<IIndicatorView>("IndicatorView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IInputView {
    maxLength?: any;
text?: any;
keyboard?: any;
isSpellCheckEnabled?: any;
isReadOnly?: any;
placeholder?: any;
placeholderColor?: any;
textColor?: any;
characterSpacing?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const InputView = XNode.prepare<IInputView>("InputView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IBehavior {
    dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Behavior = XNode.prepare<IBehavior>("Behavior|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IDataTrigger {
    binding?: any;
setters?: any;
value?: any;
enterActions?: any;
exitActions?: any;
isSealed?: any;
targetType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const DataTrigger = XNode.prepare<IDataTrigger>("DataTrigger|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IEventTrigger {
    actions?: any;
event?: any;
enterActions?: any;
exitActions?: any;
isSealed?: any;
targetType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const EventTrigger = XNode.prepare<IEventTrigger>("EventTrigger|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IMultiTrigger {
    conditions?: any;
setters?: any;
enterActions?: any;
exitActions?: any;
isSealed?: any;
targetType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const MultiTrigger = XNode.prepare<IMultiTrigger>("MultiTrigger|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITrigger {
    property?: any;
setters?: any;
value?: any;
enterActions?: any;
exitActions?: any;
isSealed?: any;
targetType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Trigger = XNode.prepare<ITrigger>("Trigger|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITriggerBase {
    enterActions?: any;
exitActions?: any;
isSealed?: any;
targetType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TriggerBase = XNode.prepare<ITriggerBase>("TriggerBase|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ICarouselView {
    peekAreaInsets?: any;
visibleViews?: any;
isDragging?: any;
isBounceEnabled?: any;
isSwipeEnabled?: any;
isScrollAnimated?: any;
currentItem?: any;
currentItemChangedCommand?: any;
currentItemChangedCommandParameter?: any;
position?: any;
positionChangedCommand?: any;
positionChangedCommandParameter?: any;
itemsLayout?: any;
isScrolling?: any;
emptyView?: any;
emptyViewTemplate?: any;
itemsSource?: any;
remainingItemsThresholdReachedCommand?: any;
remainingItemsThresholdReachedCommandParameter?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
remainingItemsThreshold?: any;
itemTemplate?: any;
itemsUpdatingScrollMode?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const CarouselView = XNode.prepare<ICarouselView>("CarouselView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ICollectionView {
    isGrouped?: any;
groupHeaderTemplate?: any;
groupFooterTemplate?: any;
selectedItem?: any;
selectedItems?: any;
selectionChangedCommand?: any;
selectionChangedCommandParameter?: any;
selectionMode?: any;
header?: any;
headerTemplate?: any;
footer?: any;
footerTemplate?: any;
itemsLayout?: any;
itemSizingStrategy?: any;
emptyView?: any;
emptyViewTemplate?: any;
itemsSource?: any;
remainingItemsThresholdReachedCommand?: any;
remainingItemsThresholdReachedCommandParameter?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
remainingItemsThreshold?: any;
itemTemplate?: any;
itemsUpdatingScrollMode?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const CollectionView = XNode.prepare<ICollectionView>("CollectionView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IGridItemsLayout {
    span?: any;
verticalItemSpacing?: any;
horizontalItemSpacing?: any;
orientation?: any;
snapPointsAlignment?: any;
snapPointsType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const GridItemsLayout = XNode.prepare<IGridItemsLayout>("GridItemsLayout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IGroupableItemsView {
    isGrouped?: any;
groupHeaderTemplate?: any;
groupFooterTemplate?: any;
selectedItem?: any;
selectedItems?: any;
selectionChangedCommand?: any;
selectionChangedCommandParameter?: any;
selectionMode?: any;
header?: any;
headerTemplate?: any;
footer?: any;
footerTemplate?: any;
itemsLayout?: any;
itemSizingStrategy?: any;
emptyView?: any;
emptyViewTemplate?: any;
itemsSource?: any;
remainingItemsThresholdReachedCommand?: any;
remainingItemsThresholdReachedCommandParameter?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
remainingItemsThreshold?: any;
itemTemplate?: any;
itemsUpdatingScrollMode?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const GroupableItemsView = XNode.prepare<IGroupableItemsView>("GroupableItemsView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IItemsLayout {
    orientation?: any;
snapPointsAlignment?: any;
snapPointsType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ItemsLayout = XNode.prepare<IItemsLayout>("ItemsLayout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IItemsView {
    emptyView?: any;
emptyViewTemplate?: any;
itemsSource?: any;
remainingItemsThresholdReachedCommand?: any;
remainingItemsThresholdReachedCommandParameter?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
remainingItemsThreshold?: any;
itemTemplate?: any;
itemsUpdatingScrollMode?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ItemsView = XNode.prepare<IItemsView>("ItemsView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ILinearItemsLayout {
    itemSpacing?: any;
orientation?: any;
snapPointsAlignment?: any;
snapPointsType?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const LinearItemsLayout = XNode.prepare<ILinearItemsLayout>("LinearItemsLayout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISelectableItemsView {
    selectedItem?: any;
selectedItems?: any;
selectionChangedCommand?: any;
selectionChangedCommandParameter?: any;
selectionMode?: any;
header?: any;
headerTemplate?: any;
footer?: any;
footerTemplate?: any;
itemsLayout?: any;
itemSizingStrategy?: any;
emptyView?: any;
emptyViewTemplate?: any;
itemsSource?: any;
remainingItemsThresholdReachedCommand?: any;
remainingItemsThresholdReachedCommandParameter?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
remainingItemsThreshold?: any;
itemTemplate?: any;
itemsUpdatingScrollMode?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SelectableItemsView = XNode.prepare<ISelectableItemsView>("SelectableItemsView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IStructuredItemsView {
    header?: any;
headerTemplate?: any;
footer?: any;
footerTemplate?: any;
itemsLayout?: any;
itemSizingStrategy?: any;
emptyView?: any;
emptyViewTemplate?: any;
itemsSource?: any;
remainingItemsThresholdReachedCommand?: any;
remainingItemsThresholdReachedCommandParameter?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
remainingItemsThreshold?: any;
itemTemplate?: any;
itemsUpdatingScrollMode?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const StructuredItemsView = XNode.prepare<IStructuredItemsView>("StructuredItemsView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ILabel {
    font?: any;
formattedText?: any;
horizontalTextAlignment?: any;
lineBreakMode?: any;
text?: any;
textColor?: any;
characterSpacing?: any;
verticalTextAlignment?: any;
xAlign?: any;
yAlign?: any;
fontAttributes?: any;
textDecorations?: any;
fontFamily?: any;
fontSize?: any;
lineHeight?: any;
maxLines?: any;
padding?: any;
textType?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Label = XNode.prepare<ILabel>("Label|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ILayout {
    isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Layout = XNode.prepare<ILayout>("Layout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IListView {
    footer?: any;
footerTemplate?: any;
groupDisplayBinding?: any;
groupHeaderTemplate?: any;
groupShortNameBinding?: any;
hasUnevenRows?: any;
header?: any;
headerTemplate?: any;
isGroupingEnabled?: any;
isPullToRefreshEnabled?: any;
isRefreshing?: any;
refreshCommand?: any;
rowHeight?: any;
selectedItem?: any;
selectionMode?: any;
separatorColor?: any;
refreshControlColor?: any;
separatorVisibility?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
cachingStrategy?: any;
refreshAllowed?: any;
footerElement?: any;
headerElement?: any;
itemsSource?: any;
itemTemplate?: any;
templatedItems?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ListView = XNode.prepare<IListView>("ListView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IMasterDetailPage {
    detail?: any;
isGestureEnabled?: any;
isPresented?: any;
master?: any;
masterBehavior?: any;
canChangeIsPresented?: any;
detailBounds?: any;
masterBounds?: any;
shouldShowSplitMode?: any;
backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const MasterDetailPage = XNode.prepare<IMasterDetailPage>("MasterDetailPage|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IMenu {
    item?: any;
text?: any;
items?: any;
count?: any;
isReadOnly?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Menu = XNode.prepare<IMenu>("Menu|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IMenuItem {
    command?: any;
commandParameter?: any;
icon?: any;
iconImageSource?: any;
isDestructive?: any;
text?: any;
isEnabled?: any;
isEnabledPropertyName?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const MenuItem = XNode.prepare<IMenuItem>("MenuItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface INavigationPage {
    barBackgroundColor?: any;
barTextColor?: any;
tint?: any;
pages?: any;
stackDepth?: any;
currentPage?: any;
rootPage?: any;
backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const NavigationPage = XNode.prepare<INavigationPage>("NavigationPage|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IOpenGLView {
    hasRenderLoop?: any;
onDisplay?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const OpenGLView = XNode.prepare<IOpenGLView>("OpenGLView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IPage {
    backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Page = XNode.prepare<IPage>("Page|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IPanGestureRecognizer {
    touchPoints?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const PanGestureRecognizer = XNode.prepare<IPanGestureRecognizer>("PanGestureRecognizer|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IPicker {
    fontAttributes?: any;
fontFamily?: any;
fontSize?: any;
items?: any;
itemsSource?: any;
selectedIndex?: any;
selectedItem?: any;
textColor?: any;
characterSpacing?: any;
title?: any;
titleColor?: any;
itemDisplayBinding?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Picker = XNode.prepare<IPicker>("Picker|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IPinchGestureRecognizer {
    isPinching?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const PinchGestureRecognizer = XNode.prepare<IPinchGestureRecognizer>("PinchGestureRecognizer|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IProgressBar {
    progressColor?: any;
progress?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ProgressBar = XNode.prepare<IProgressBar>("ProgressBar|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IRefreshView {
    isRefreshing?: any;
command?: any;
commandParameter?: any;
refreshColor?: any;
content?: any;
controlTemplate?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const RefreshView = XNode.prepare<IRefreshView>("RefreshView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IRelativeLayout {
    children?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const RelativeLayout = XNode.prepare<IRelativeLayout>("RelativeLayout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IRowDefinition {
    height?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const RowDefinition = XNode.prepare<IRowDefinition>("RowDefinition|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IScrollView {
    layoutAreaOverride?: any;
content?: any;
contentSize?: any;
orientation?: any;
scrollX?: any;
scrollY?: any;
horizontalScrollBarVisibility?: any;
verticalScrollBarVisibility?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ScrollView = XNode.prepare<IScrollView>("ScrollView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISearchBar {
    cancelButtonColor?: any;
horizontalTextAlignment?: any;
verticalTextAlignment?: any;
searchCommand?: any;
searchCommandParameter?: any;
fontAttributes?: any;
fontFamily?: any;
fontSize?: any;
maxLength?: any;
text?: any;
keyboard?: any;
isSpellCheckEnabled?: any;
isReadOnly?: any;
placeholder?: any;
placeholderColor?: any;
textColor?: any;
characterSpacing?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SearchBar = XNode.prepare<ISearchBar>("SearchBar|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IBackButtonBehavior {
    command?: any;
commandParameter?: any;
iconOverride?: any;
isEnabled?: any;
textOverride?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const BackButtonBehavior = XNode.prepare<IBackButtonBehavior>("BackButtonBehavior|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IBaseShellItem {
    flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const BaseShellItem = XNode.prepare<IBaseShellItem>("BaseShellItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface INavigableElement {
    navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const NavigableElement = XNode.prepare<INavigableElement>("NavigableElement|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISearchHandler {
    isFocused?: any;
keyboard?: any;
horizontalTextAlignment?: any;
verticalTextAlignment?: any;
textColor?: any;
cancelButtonColor?: any;
fontAttributes?: any;
fontFamily?: any;
characterSpacing?: any;
fontSize?: any;
placeholderColor?: any;
placeholder?: any;
backgroundColor?: any;
clearIcon?: any;
clearIconHelpText?: any;
clearIconName?: any;
clearPlaceholderCommand?: any;
clearPlaceholderCommandParameter?: any;
clearPlaceholderEnabled?: any;
clearPlaceholderHelpText?: any;
clearPlaceholderIcon?: any;
clearPlaceholderName?: any;
command?: any;
commandParameter?: any;
displayMemberName?: any;
isSearchEnabled?: any;
itemsSource?: any;
itemTemplate?: any;
query?: any;
queryIcon?: any;
queryIconHelpText?: any;
queryIconName?: any;
searchBoxVisibility?: any;
selectedItem?: any;
showsResults?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SearchHandler = XNode.prepare<ISearchHandler>("SearchHandler|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IShell {
    flyoutVerticalScrollMode?: any;
flyoutIcon?: any;
currentItem?: any;
currentState?: any;
flyoutBackgroundImage?: any;
flyoutBackgroundImageAspect?: any;
flyoutBackgroundColor?: any;
flyoutBehavior?: any;
flyoutHeader?: any;
flyoutHeaderBehavior?: any;
flyoutHeaderTemplate?: any;
flyoutIsPresented?: any;
items?: any;
itemTemplate?: any;
menuItemTemplate?: any;
backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Shell = XNode.prepare<IShell>("Shell|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IShellContent {
    menuItems?: any;
content?: any;
contentTemplate?: any;
flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ShellContent = XNode.prepare<IShellContent>("ShellContent|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IShellGroupItem {
    flyoutDisplayOptions?: any;
flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ShellGroupItem = XNode.prepare<IShellGroupItem>("ShellGroupItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IFlyoutItem {
    currentItem?: any;
items?: any;
flyoutDisplayOptions?: any;
flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const FlyoutItem = XNode.prepare<IFlyoutItem>("FlyoutItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITabBar {
    currentItem?: any;
items?: any;
flyoutDisplayOptions?: any;
flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TabBar = XNode.prepare<ITabBar>("TabBar|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IShellItem {
    currentItem?: any;
items?: any;
flyoutDisplayOptions?: any;
flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ShellItem = XNode.prepare<IShellItem>("ShellItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITab {
    currentItem?: any;
items?: any;
stack?: any;
flyoutDisplayOptions?: any;
flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Tab = XNode.prepare<ITab>("Tab|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IShellSection {
    currentItem?: any;
items?: any;
stack?: any;
flyoutDisplayOptions?: any;
flyoutIcon?: any;
icon?: any;
isChecked?: any;
isEnabled?: any;
route?: any;
title?: any;
tabIndex?: any;
isTabStop?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ShellSection = XNode.prepare<IShellSection>("ShellSection|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISlider {
    minimumTrackColor?: any;
maximumTrackColor?: any;
thumbColor?: any;
thumbImageSource?: any;
thumbImage?: any;
dragStartedCommand?: any;
dragCompletedCommand?: any;
maximum?: any;
minimum?: any;
value?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Slider = XNode.prepare<ISlider>("Slider|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISpan {
    style?: any;
backgroundColor?: any;
textColor?: any;
characterSpacing?: any;
foregroundColor?: any;
text?: any;
font?: any;
fontAttributes?: any;
fontFamily?: any;
fontSize?: any;
textDecorations?: any;
lineHeight?: any;
gestureRecognizers?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Span = XNode.prepare<ISpan>("Span|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IStackLayout {
    orientation?: any;
spacing?: any;
children?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const StackLayout = XNode.prepare<IStackLayout>("StackLayout|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IStepper {
    increment?: any;
maximum?: any;
minimum?: any;
value?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Stepper = XNode.prepare<IStepper>("Stepper|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IStreamImageSource {
    isEmpty?: any;
stream?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const StreamImageSource = XNode.prepare<IStreamImageSource>("StreamImageSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISwipeGestureRecognizer {
    command?: any;
commandParameter?: any;
direction?: any;
threshold?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SwipeGestureRecognizer = XNode.prepare<ISwipeGestureRecognizer>("SwipeGestureRecognizer|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISwipeItem {
    backgroundColor?: any;
command?: any;
commandParameter?: any;
icon?: any;
iconImageSource?: any;
isDestructive?: any;
text?: any;
isEnabled?: any;
isEnabledPropertyName?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SwipeItem = XNode.prepare<ISwipeItem>("SwipeItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISwipeItems {
    mode?: any;
swipeBehaviorOnInvoked?: any;
item?: any;
count?: any;
isReadOnly?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SwipeItems = XNode.prepare<ISwipeItems>("SwipeItems|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISwipeItemView {
    command?: any;
commandParameter?: any;
content?: any;
controlTemplate?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SwipeItemView = XNode.prepare<ISwipeItemView>("SwipeItemView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISwipeView {
    leftItems?: any;
rightItems?: any;
topItems?: any;
bottomItems?: any;
content?: any;
controlTemplate?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const SwipeView = XNode.prepare<ISwipeView>("SwipeView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ISwitch {
    onColor?: any;
thumbColor?: any;
isToggled?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const Switch = XNode.prepare<ISwitch>("Switch|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITabbedPage {
    barBackgroundColor?: any;
barTextColor?: any;
unselectedTabColor?: any;
selectedTabColor?: any;
itemsSource?: any;
itemTemplate?: any;
selectedItem?: any;
currentPage?: any;
children?: any;
backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TabbedPage = XNode.prepare<ITabbedPage>("TabbedPage|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITableRoot {
    count?: any;
item?: any;
title?: any;
textColor?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TableRoot = XNode.prepare<ITableRoot>("TableRoot|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITableSection {
    count?: any;
item?: any;
title?: any;
textColor?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TableSection = XNode.prepare<ITableSection>("TableSection|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITableSectionBase {
    title?: any;
textColor?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TableSectionBase = XNode.prepare<ITableSectionBase>("TableSectionBase|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITableView {
    hasUnevenRows?: any;
intent?: any;
root?: any;
rowHeight?: any;
model?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TableView = XNode.prepare<ITableView>("TableView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITapGestureRecognizer {
    command?: any;
commandParameter?: any;
numberOfTapsRequired?: any;
tappedCallback?: any;
tappedCallbackParameter?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TapGestureRecognizer = XNode.prepare<ITapGestureRecognizer>("TapGestureRecognizer|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITemplatedPage {
    controlTemplate?: any;
backgroundImage?: any;
backgroundImageSource?: any;
icon?: any;
iconImageSource?: any;
isBusy?: any;
padding?: any;
title?: any;
toolbarItems?: any;
containerArea?: any;
ignoresContainerArea?: any;
internalChildren?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TemplatedPage = XNode.prepare<ITemplatedPage>("TemplatedPage|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITemplatedView {
    controlTemplate?: any;
isClippedToBounds?: any;
padding?: any;
cascadeInputTransparent?: any;
children?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TemplatedView = XNode.prepare<ITemplatedView>("TemplatedView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface ITimePicker {
    format?: any;
textColor?: any;
characterSpacing?: any;
time?: any;
fontAttributes?: any;
fontFamily?: any;
fontSize?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const TimePicker = XNode.prepare<ITimePicker>("TimePicker|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IToolbarItem {
    name?: any;
order?: any;
priority?: any;
command?: any;
commandParameter?: any;
icon?: any;
iconImageSource?: any;
isDestructive?: any;
text?: any;
isEnabled?: any;
isEnabledPropertyName?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const ToolbarItem = XNode.prepare<IToolbarItem>("ToolbarItem|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IUriImageSource {
    isEmpty?: any;
cacheValidity?: any;
cachingEnabled?: any;
uri?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const UriImageSource = XNode.prepare<IUriImageSource>("UriImageSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IUrlWebViewSource {
    url?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const UrlWebViewSource = XNode.prepare<IUrlWebViewSource>("UrlWebViewSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IView {
    gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const View = XNode.prepare<IView>("View|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IVisualElement {
    visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const VisualElement = XNode.prepare<IVisualElement>("VisualElement|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IWebView {
    canGoBack?: any;
canGoForward?: any;
source?: any;
gestureRecognizers?: any;
horizontalOptions?: any;
margin?: any;
verticalOptions?: any;
visual?: any;
flowDirection?: any;
anchorX?: any;
anchorY?: any;
backgroundColor?: any;
behaviors?: any;
bounds?: any;
height?: any;
heightRequest?: any;
inputTransparent?: any;
isEnabled?: any;
isFocused?: any;
isVisible?: any;
minimumHeightRequest?: any;
minimumWidthRequest?: any;
opacity?: any;
rotation?: any;
rotationX?: any;
rotationY?: any;
scale?: any;
scaleX?: any;
scaleY?: any;
tabIndex?: any;
isTabStop?: any;
translationX?: any;
translationY?: any;
triggers?: any;
width?: any;
widthRequest?: any;
x?: any;
y?: any;
batched?: any;
disableLayout?: any;
isInNativeLayout?: any;
isNativeStateConsistent?: any;
isPlatformEnabled?: any;
resources?: any;
navigation?: any;
style?: any;
styleClass?: any;
class?: any;
navigationProxy?: any;
automationId?: any;
classId?: any;
effects?: any;
id?: any;
parentView?: any;
styleId?: any;
logicalChildren?: any;
realParent?: any;
parent?: any;
effectControlProvider?: any;
platform?: any;
dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const WebView = XNode.prepare<IWebView>("WebView|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");


export interface IWebViewSource {
    dispatcher?: any;
bindingContext?: any;
    [key: string]: any;
}
export const WebViewSource = XNode.prepare<IWebViewSource>("WebViewSource|clr-namespace:Xamarin.Forms;assembly=Xamarin.Forms.Core;");
